(define level                as '()                         [level])
(define level-width          as 5                           [number of slots per side])
(define m                    as (- level-width 1)           [max coordinate] )
(define level-length         as (* level-width level-width) [number of slots])
(define level-current-number as nil                         [current level number])

(define coordinates-to-index as (fn (x y)
    (+ x (* y level-width)))
  [kkk] '(x [x] y [y]) howto-ok)

(define index-to-x as (fn (index)
    (mod index level-width))
  [kkk] '(index [index]) howto-ok)

(define index-to-y as (fn (index)
    (/ index level-width))
  [kkk] '(index [index]) howto-ok)

(define new-anim as (fn (name type x y)
    (animation-entity-new name type '((- (* 32 x) 80) (- (* 32 y) 80) 0)))
  [new animation] '(name [name] type [type] x [x] y [y]) howto-no)

(define make-slot as (fn (index type)
    (define x    as (index-to-x index)              [x])
    (define y    as (to-integer (index-to-y index)) [y])
    (define name as (string-format [{}{}] x y)      [name])

    (new-anim name type x y)

    (hash-map
         'id   name
         'x    x
         'y    y
         'type type))
  [make slot of the given type] '(index [index] type [type]) howto-no)

(define slot-toggle-at as (fn (x y)
    (slot-toggle (level-get-slot x y)))
  [-] '(x [x] y [y]) howto-no)

(define slot-toggle as (fn (slot)
    (define id   as (find slot 'id)   [id])
    (define type as (find slot 'type) [type])
    (define x    as (find slot 'x)    [type])
    (define y    as (find slot 'y)    [type])

    (if (== type [slot-off])
        (do
            (= slot 'type [slot-on])
            (animation-entity-remove id)
            (new-anim id [slot-on] x y)
            (return nil)))

    (if (== type [slot-on])
        (do
            (= slot 'type [slot-off])
            (animation-entity-remove id)
            (new-anim id [slot-off] x y)
            (return nil)))

    (if (== type [slot-covered-on])
        (do
            (= slot 'type [slot-covered-off])
            (animation-entity-remove id)
            (new-anim id [slot-covered-off] x y)
            (return nil)))

    (if (== type [slot-covered-off])
        (do
            (= slot 'type [slot-covered-on])
            (animation-entity-remove id)
            (new-anim id [slot-covered-on] x y)
            (return nil)))

    (if (== type [lock-full-opened])
        (do
            (= slot 'type [lock-full-closed])
            (animation-entity-remove id)
            (new-anim id [lock-full-closed] x y)
            (return nil)))

    (if (== type [lock-half-closed])
        (do
            (= slot 'type [lock-full-closed])
            (animation-entity-remove id)
            (new-anim id [lock-full-closed] x y)
            (return nil)))

    (if (== type [lock-half-opened])
        (do
            (= slot 'type [lock-full-opened])
            (animation-entity-remove id)
            (new-anim id [lock-full-opened] x y)
            (return nil)))

    (if (== type [lock-full-closed])
        (do
            (= slot 'type [lock-half-opened])
            (animation-entity-remove id)
            (new-anim id [lock-half-opened] x y)
            (return nil))))
  [-] '(slot [slot]) howto-no)

(define slot-toggle-neighbors as (fn (slot)
    (define x as (find slot 'x) [type])
    (define y as (find slot 'y) [type])

    ; Corners
    (if (and (== x 0) (== y 0)) (do (slot-toggle-at (+ x 1) y) (slot-toggle-at x (+ y 1)) (return nil)))
    (if (and (== x m) (== y 0)) (do (slot-toggle-at (- x 1) y) (slot-toggle-at x (+ y 1)) (return nil)))
    (if (and (== x 0) (== y m)) (do (slot-toggle-at (+ x 1) y) (slot-toggle-at x (- y 1)) (return nil)))
    (if (and (== x m) (== y m)) (do (slot-toggle-at (- x 1) y) (slot-toggle-at x (- y 1)) (return nil)))

    ; Left side
    (if (== x 0) (do (slot-toggle-at (+ x 1) y) (slot-toggle-at x (- y 1)) (slot-toggle-at x (+ y 1)) (return nil)))

    ; Right side
    (if (== x m) (do (slot-toggle-at (- x 1) y) (slot-toggle-at x (- y 1)) (slot-toggle-at x (+ y 1)) (return nil)))

    ; Top side
    (if (== y 0) (do (slot-toggle-at x (+ y 1)) (slot-toggle-at (- x 1) y) (slot-toggle-at (+ x 1) y) (return nil)))

    ; Bottom side
    (if (== y m) (do (slot-toggle-at x (- y 1)) (slot-toggle-at (- x 1) y) (slot-toggle-at (+ x 1) y) (return nil)))

    ; Somewhere "middle"; not corners and not borders
    (slot-toggle-at x (- y 1))
    (slot-toggle-at x (+ y 1))
    (slot-toggle-at (+ x 1) y)
    (slot-toggle-at (- x 1) y))
  [-] '(slot [slot]) howto-no)

(define slot-is-passed as (fn (slot)
    (define type as (find slot 'type) [type])

    (if (== type [slot-off])         (return true ))
    (if (== type [slot-covered-off]) (return true ))
    (if (== type [lock-full-opened]) (return true ))
    (if (== type [slot-missing])     (return true ))

    (return false))
  [is this slot in a state allowing level pass] '(slot [slot]) howto-no)

(define slot-on-mouse as (fn (slot x y ox oy)
    (define id  as (find slot 'id) [id])

    (define mx1 as (+ ox (animation-entity-get-x id)) [mx1])
    (define mx2 as (+ mx1 32) [mx2])

    (define my1 as (+ oy (animation-entity-get-y id)) [my1])
    (define my2 as (+ my1 32) [my2])

    ; TODO XXX make if to return errors it encounters
    (if (< x mx1) (return nil))
    (if (> x mx2) (return nil))

    (if (< y my1) (return nil))
    (if (> y my2) (return nil))

    (define type as (find slot 'type) [type])

    (if (== type [slot-off])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil)))

    (if (== type [slot-on])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil)))

    (if (== type [slot-covered-on])
        (do
            (return nil)))

    (if (== type [slot-covered-off])
        (do
            (return nil)))

    (if (== type [lock-full-opened])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil)))

    (if (== type [lock-half-closed])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil)))

    (if (== type [lock-half-opened])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil)))

    (if (== type [lock-full-closed])
        (do
            (slot-toggle slot)
            (slot-toggle-neighbors slot)
            (return nil))))
  [slot on mouse] '(slot [slot] x [x] y [y] ox [ox] oy [oy]) howto-no)

(define level-reset-to as (fn (input)
    (animation-entity-remove-all)
    (= level '())
    (> (len input) level-length (abort [level input is too long!]))
    (if (< (len input) level-length) (for i from (len input) to (- level-length 1) (+= input [slot-off])))
    (for i from 0 to (- level-length 1) (+= level (make-slot i (ln@ input i)))))
  [clear level to the given level] '(input [level as vector of strings]) howto-no)

(define level-set-slot as (fn (x y type)
    (= (ln@ level (coordinates-to-index x y)) 'type type))
  [level-set-slot] '(x [x] y [y] type [type]) howto-no)

(define level-get-slot as (fn (x y)
    (ln@ level (coordinates-to-index x y)))
  [level-get-slot] '(x [x] y [y]) howto-no)

(define level-1 as (fn ()
    (level-reset-to '(
        [slot-on]  [slot-on]  [slot-off] [slot-off] [slot-off]
        [slot-on]))
    (= level-current-number 1))
  [level-1] '() howto-no)

(define level-2 as (fn ()
    (level-reset-to '(
        [slot-off]  [slot-off]  [slot-off] [slot-off] [slot-off]
        [slot-off]  [slot-off]  [slot-off] [slot-off] [slot-off]
        [slot-off]  [slot-off]  [lock-full-closed]))
    (= level-current-number 2))
  [level-2] '() howto-no)

(define level-3 as (fn ()
    (level-reset-to '(
        [slot-missing] [slot-off] [slot-off] [slot-off] [slot-missing]
        [slot-off] [slot-off] [slot-off] [slot-off] [slot-off]
        [slot-off] [slot-off] [slot-covered-on] [slot-off] [slot-off]
        [slot-off] [slot-off] [slot-off] [slot-off] [slot-off]
        [slot-missing] [slot-off] [slot-off] [slot-off] [slot-missing]
    ))
    (= level-current-number 3))
  [level-3] '() howto-no)

(define level-4 as (fn ()
    (level-reset-to '(
        [slot-off] [slot-off] [slot-off] [slot-off] [slot-off]
        [slot-off] [slot-off] [slot-off] [slot-off] [slot-off]
        [slot-off] [slot-off] [slot-on]
    ))
    (= level-current-number 4))
  [level-4] '() howto-no)

(define level-5 as (fn ()
    (level-reset-to '([slot-on]))
    (= level-current-number 5))
  [level-5] '() howto-no)

(define level-restart as (fn ()
    ; implement 'select' and use it here. these if's
    ; without else will not work without the temp variable
    (define lnum as level-current-number [level number before change])

    (if (== 1 lnum) (level-1))
    (if (== 2 lnum) (level-2))
    (if (== 3 lnum) (level-3))
    (if (== 4 lnum) (level-4))
    (if (== 5 lnum) (level-5))

    (shake))
  [restart level] '() howto-no)

(define level-next as (fn ()
    ; implement 'select' and use it here. these if's
    ; without else will not work without the temp variable
    (define lnum as level-current-number [level number before change])

    (if (== 1 lnum) (level-2))
    (if (== 2 lnum) (level-3))
    (if (== 3 lnum) (level-4))
    (if (== 4 lnum) (level-5))
    (if (== 5 lnum) (level-1))

    )
  [next level] '() howto-no)

(define current-state as [game] [current-state])

(define printlevel as false [printlevel])

(define check-possible-level-pass as (fn ()
    (for i in level (if (== false (slot-is-passed i)) (return nil)))
    ; Level is passed
    (= current-state [tweenOut])
    (tween-level-out))
  [-] '() howto-no)

(define on-mouse-button-down as (fn (x y ox oy)
    (for i in level (slot-on-mouse i x y ox oy))
    (check-possible-level-pass) nil)
  [----] '(x [x] y [y] ox [ox] oy [oy]) howto-no)

(define state-update-game as (fn (dt input input-x input-y origo-x origo-y)
    (if (== input [restart])           (do (= input []) (level-restart)))
    (if (== input [action 1])          (do (= input []) (= printlevel (not printlevel))))
    (if (== input [down]) (do (= input []) (on-mouse-button-down input-x input-y origo-x origo-y)))

    true)
  [state-update]
  '(dt [delta time]
    input   [string 'mouse-button-down', 'restart' or 'action 1' ]
    input-x [x coord of mouse]
    input-y [y coord of mouse]
    origo-x [origo x]
    origo-y [origo y])
  howto-no)

(define state-update-tween-out as (fn (dt input input-x input-y origo-x origo-y) true)
  [state-update]
  '(dt [delta time]
    input   [string 'mouse-button-down', 'restart' or 'action 1' ]
    input-x [x coord of mouse]
    input-y [y coord of mouse]
    origo-x [origo-x]
    origo-y [origo-y])
  howto-no)

(define state-update as (fn (dt input input-x input-y origo-x origo-y)

    (define tmpState as current-state [tmpState])

    (if (== [game]     tmpState) (state-update-game      dt input input-x input-y origo-x origo-y))
    (if (== [tweenOut] tmpState) (state-update-tween-out dt input input-x input-y origo-x origo-y))

    (if printlevel (level-print))

    true)
  [state-update]
  '(dt [delta time]
    input   [string 'mouse-button-down', 'restart' or 'action 1' ]
    input-x [x coord of mouse]
    input-y [y coord of mouse]
    origo-x [origo-x]
    origo-y [origo-y])
  howto-no)

(define state-on-tween-out-done as (fn ()
    ;(message-show 0)
    (level-next))
  [---] '() howto-no)

(define state-on-tween-in-done as (fn ()
    (= current-state [game]))
  [---] '() howto-no)

; Game starts here
(level-1)



;;; Here are some helper functions for debugging purposes.
;;; Can be removed later

(define level-print-row as (fn (y)
    (for x from 0 to (- level-width 1) (level-print-slot x y))
    (println []))
  [lll] '(y [y]) howto-no)

(define level-print as (fn ()
    (println [-------------------------------------------------])
    (for y from 0 to (- level-width 1) (level-print-row y))
    (println [-------------------------------------------------]))
  [lll] '() howto-no)

(define level-print-slot as (fn (x y)
    (define name as (find (level-get-slot x y) 'type) [name])

    (define str as
        (string-format [{} ({},{})] name (find (level-get-slot x y) 'x) (find (level-get-slot x y) 'y)) [str])

    (print str)

    (define spaces as (- 18 (len str)) [ll])
    (for i from 0 to spaces (print [ ])))
  [kk] '(x [x] y [y]) howto-no)

